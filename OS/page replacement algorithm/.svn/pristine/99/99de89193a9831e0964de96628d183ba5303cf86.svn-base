//################################
//Course: Operating Systems
//Semester: 2, 2019
//Name: Luoyang Xing
//ID: a1756195
//Assignment 2
//################################
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <fstream>
#include <algorithm>
#include <queue>
#include <iomanip>
#include <cmath>

using namespace std;


const int DEBUG_PRINT_QUEUE = false;


int main(int argc, char const *argv[])
{
	fstream inFile;
	string line;
	//input the customer information file
	inFile.open("input.txt");

	//create a vector of string cus to store inout data
	vector<string> cus;
	string delimiter = " ";
	while (!inFile.eof())
	{
		getline(inFile, line);
		size_t pos = 0;
		string token;
		while ((pos = line.find(delimiter)) != string::npos) {
   		token = line.substr(0, pos);
   		cus.push_back(token);
    	line.erase(0, pos + delimiter.length());
		}
		cus.push_back(line);
	}
	inFile.close();

	//we ensure the algorithm we use, the number of frames and page size
	string psize, nframes, alg;//strings of inputs
	psize = argv[2];
	nframes = argv[3];
	alg = argv[4];
	int ps, nf;
	ps = stoi(psize);
	nf = stoi(nframes);

	//we convert the input into 2 string vectors, one stores R or W, the other stores address
	std::vector<string> rw;
	std::vector<string> addr;

	for (size_t i = 0; i < cus.size(); ++i)
	{
		if (cus[i] == "#")
		{
			i=i+1;
		}
		else if (cus[i]=="R"||cus[i]=="W")
		{
			rw.push_back(cus[i]);
		}
		else
		{
			addr.push_back(cus[i]);
		}
	}

	int NR;
	int NW;
	//cout<<addr.size();
	std::vector<string> pi; //vector of string including the page index
	if (ps == 4096)
	{
		for (size_t i = 0; i < addr.size(); ++i)
		{
			string x;
			x = addr[i][4];
			pi.push_back(x);

		}
	}
	else if (ps == 1024)
	{
		for (size_t j = 0; j < addr.size(); ++j)
		{
		
		string x;
		string y;
		char z;
		int w;
		
		x = addr[j][4];
		z = addr[j][5];
		if (z >= '0' && z<='9')
		{
			w = z-'0';
		}
		else if (z == 'a')
		{
			w=10;
		}else if (z == 'b')
		{
			w=11;
		}else if (z == 'c')
		{
			w=12;
		}else if (z == 'd')
		{
			w=13;
		}else if (z == 'e')
		{
			w=14;
		}else if (z == 'f')
		{
			w=15;
		}
		w = w/4;
		y = std::to_string(w);
		x.append(y);
		pi.push_back(x);
		}
	}

	else if (ps==2048)
	{
		for (size_t l = 0; l < addr.size(); ++l)
		{
		
		string x;
		string y;
		char z;
		int w;
		
		x = addr[l][4];
		z = addr[l][5];
		if (z >= '0' && z<='9')
		{
			w = z-'0';
		}
		else if (z == 'a')
		{
			w=10;
		}else if (z == 'b')
		{
			w=11;
		}else if (z == 'c')
		{
			w=12;
		}else if (z == 'd')
		{
			w=13;
		}else if (z == 'e')
		{
			w=14;
		}else if (z == 'f')
		{
			w=15;
		}
		w = w/8;
		y = std::to_string(w);
		x.append(y);
		pi.push_back(x);
		}
		
	} 
	else if (ps == 8192)
	{
		for (size_t j = 0; j < addr.size(); ++j)
		{
		
		string x;
		string y;
		char z;
		int w;

		z = addr[j][4];
		if (z >= '0' && z<='9')
		{
			w = z-'0';
		}
		else if (z == 'a')
		{
			w=10;
		}else if (z == 'b')
		{
			w=11;
		}else if (z == 'c')
		{
			w=12;
		}else if (z == 'd')
		{
			w=13;
		}else if (z == 'e')
		{
			w=14;
		}else if (z == 'f')
		{
			w=15;
		}
		w = w/2;
		y = std::to_string(w);
		pi.push_back(y);
		}
	}

	std::vector<string> frames;

	



if (alg=="FIFO") //we do the FIFO replacement algorithm
{
	int MISS=0;
	int dirty = 0;
	std::vector<string> Dir;
	
	for (size_t i = 0; i < rw.size(); ++i)
	{
		int e=0;
		if (rw[i] == "W")
		{
			for (size_t j = 0; j < Dir.size(); ++j)
			{
				if (pi[i] == Dir[j])
				{
					e=1;
				}
			}
			if (e==0)
			{
				Dir.push_back(pi[i]);
			}
		}
		if (frames.size() < nf)
		{
			int exist = 0;
			//loop frames to check if it already in it
			for (size_t j = 0; j < frames.size(); ++j)
			{
				if (pi[i] == frames[j])
				{
					exist=1;
				}
			}
			//if not found, push it 
			if (exist==0)
			{
				frames.push_back(pi[i]);
				MISS++;
			
			}
		}
		else // all frames filled
		{
			int exist1 = 0;
			//loop frames to check if it already in it
			for (size_t j = 0; j < frames.size(); ++j)
			{
				if (pi[i] == frames[j])
				{
					exist1=1;
				}
			}
			if (exist1==0)//pop the oldest and push the new one in
			{
				//check if the first element already in Dir
				for (size_t x = 0; x < Dir.size(); ++x)
				{
					if (frames[0] == Dir[x])
					{
						dirty++;
						Dir.erase(Dir.begin()+x);
					
					}
				}
				frames.erase(frames.begin());
				frames.push_back(pi[i]);
				MISS++;

			}
		}
	}

	NR = MISS;
	NW = dirty;

}

if (alg == "LRU")
{
	int MISS=0;
	int dirty = 0;
	std::vector<string> Dir;

	int timer = 0;
	std::vector<int> counter; //same size as frames, indicating each element time


	
	for (size_t i = 0; i < rw.size(); ++i)
	{
		timer++;
		//if W, put corresponding pi in dirty vector
		int e=0;
		if (rw[i] == "W")
		{
			for (size_t j = 0; j < Dir.size(); ++j)
			{
				if (pi[i] == Dir[j])
				{
					e=1;
				}
			}
			if (e==0)
			{
				Dir.push_back(pi[i]);
			}
		}
		//frames not full
		if (frames.size() < nf)
		{
			int exist = 0;
			int pos;
			//loop frames to check if it already in it
			for (size_t j = 0; j < frames.size(); ++j)
			{
				if (pi[i] == frames[j])
				{
					exist=1;
					pos = j;
				}
			}
			//if not found, push it 
			if (exist==0)
			{
				frames.push_back(pi[i]);
				MISS++;
				counter.push_back(timer);
			
			}
			else if (exist ==1)
			//update the corresponding element's counter
			{
				counter[pos] = timer;
			}
		}
		else // all frames filled
		{
			int exist1 = 0;
			int po;
			int repInd;
			int min = counter[0];
			//loop frames to check if it already in it
			for (size_t j = 0; j < frames.size(); ++j)
			{
				if (pi[i] == frames[j])
				{
					exist1=1;
					po=j;
				}
			}
			if (exist1==0)//pop the oldest and push the new one in
			{
				//find which element to replace 
				for (int i = 0; i < counter.size(); ++i)
				{
					if (counter[i] <= min)
					{
						min = counter[i];
						repInd = i;
					}
				}

				//check if the repInd's element already in Dir
				for (size_t x = 0; x < Dir.size(); ++x)
				{
					if (frames[repInd] == Dir[x])
					{
						dirty++;
						Dir.erase(Dir.begin()+x);
					//	cout<<frames[repInd]<<" ";
					
					}
				}

				frames.erase(frames.begin()+repInd);
				counter.erase(counter.begin()+repInd);
				frames.push_back(pi[i]);
				counter.push_back(timer);
				MISS++;

			}
			else if (exist1==1)
			{
				counter[po] = timer;
			}
		}
	}

	NR = MISS;
	NW = dirty;
}

if (alg == "ARB")
{
	string aa,bb;
	aa = argv[5];
	bb = argv[6];
	int a,b;
	a = stoi(aa); //number of bits
	b = stoi(bb);//value of time interval

	int MISS=0;
	int dirty = 0;
	std::vector<string> Dir;

	int timer = 0; //every b rounds, reference bits shift
	std::vector<vector<int>> ref; //same size as frames
	std::vector<int> fi;//if need fifo, this records first in time

	for (size_t i = 0; i < rw.size(); ++i)
	{
		timer++;
		//if W, put corresponding pi in dirty vector
		int e=0;
		if (rw[i] == "W")
		{
			for (size_t j = 0; j < Dir.size(); ++j)
			{
				if (pi[i] == Dir[j])
				{
					e=1;
				}
			}
			if (e==0)
			{
				Dir.push_back(pi[i]);
			}
		}
		//every b rounds, shift digits 1 step to right in ref first
		if (timer % b == 1)
		{
			for (size_t j = 0; j < ref.size(); ++j)
			{
				ref[j].erase(ref[j].begin());//pop head
				ref[j].push_back(0);//push a 0 in tail
			}
		}
		//construct a vector with only tail is 1
		std::vector<int> tail1;
		for (int i = 0; i < a-1; ++i)
		{
			tail1.push_back(0);
		}
		tail1.push_back(1);


		//if frame not full
		if (frames.size() < nf)
		{
			int exist = 0;
			int pos;
			//loop frames to check if it already in it
			for (size_t j = 0; j < frames.size(); ++j)
			{
				if (pi[i] == frames[j])
				{
					exist=1;
					pos = j;
				}
			}
			//if not found, push it , and change the elements tail to 1
			if (exist==0)
			{
				frames.push_back(pi[i]);
				MISS++;
				fi.push_back(timer);//record first in time
				ref.push_back(tail1);//push the a digit bits with a 1 at tail
			}
			else if (exist ==1)
			//update the corresponding element's ref tail to 1
			{
				ref[pos][a-1] = 1;
			}
		}
		else // all frames filled
		{
			int exist1 = 0;
			int po;
			
			//loop frames to check if it already in it
			for (size_t j = 0; j < frames.size(); ++j)
			{
				if (pi[i] == frames[j])
				{
					exist1=1;
					po=j;
				}
			}
			if (exist1==0)//pop the oldest and push the new one in
			{
				//find which element to replace 
				std::vector<int> num;//stores the transformed value of each element
				int position;
				for (int k = 0; k < ref.size(); ++k)
				{
					int u = 0;
					for (int i = 0; i < a; ++i)
					{
						u = u + ref[k][i]*pow(16,i); 
					}
					num.push_back(u);
				}
				//find the min 
				int mi = num[0];
				for (size_t i = 0; i < num.size(); ++i)
				{
					if (num[i] <= mi)
					{
						mi = num[i];
						position = i;
					}
				}
				//check if there are same minimum value in num
				//store indexes of min value
				std::vector<int> v;
				int count;
				for (size_t i = 0; i < num.size(); ++i)
				{
					if (num[i] == mi)
					{
						count++;
						v.push_back(i);
					}
				}
				//if count>1, use fifo to find the oldest one
				int repInd;
				if (count > 1)
				{
					int min = fi[v[0]];
					for (size_t i = 0; i < v.size(); ++i)
					{
						if (fi[v[i]] <= min)
						{
							min = fi[v[i]];
							repInd = v[i];
						}
					}
					
					
				}
				else{//replace the element at the position
					
					repInd = position;
				}

				//check if the repInd's element already in Dir
				for (size_t x = 0; x < Dir.size(); ++x)
				{
					if (frames[repInd] == Dir[x])
					{
						dirty++;
						Dir.erase(Dir.begin()+x);

					}
				}

				frames.erase(frames.begin()+repInd);
				fi.erase(fi.begin()+repInd);
				ref.erase(ref.begin()+repInd);
				frames.push_back(pi[i]);
				fi.push_back(timer);
				ref.push_back(tail1);
				MISS++;

			}
			else if (exist1==1)
			{
				ref[po][a-1] = 1;
			}
		}
/*		for (size_t i = 0; i < ref.size(); ++i)
		{
			for (int g = a-1; g >=0; --g)
			{
				cout<<ref[i][g];
			}
			cout<<" ";
			cout<<frames[i]<<" ";
		}
		cout<<"     t:"<<timer<<endl;   */
		
	}

	NR = MISS;
	NW = dirty;
}



















/*
	std::vector<int> v;
	v.push_back(10);
	v.push_back(12);
	v.push_back(1);
	v.push_back(111);
	v.erase(v.begin()+2);
	v.push_back(22);
	for (int i = 0; i < v.size(); ++i)
	{
		cout<<v[i]<<" ";
	}

*/

	//final output, 4 spaces
	cout<<setiosflags(ios::right) << setw(10)<<"events in trace:"<<setw(10)<<rw.size()<<endl;
	cout<<setiosflags(ios::right) <<setw(10)<<"total disk reads:"<<setw(10)<<NR<<endl;
	cout<<setiosflags(ios::right) <<setw(10)<<"total disk writes:"<<setw(10)<<NW<<endl;
	cout<<setiosflags(ios::right) <<setw(10)<<"page faults:"<<setw(10)<<NR<<endl;


	return 0;
}
