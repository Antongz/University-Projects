

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux(in=load,sel=address[14],a=rload,b=load2);
    DMux(in=load2,sel=address[13],a=sload,b=nothing);

    RAM16K(in=in,load=rload,address=address[0..13],out=rout);
    Screen(in=in,load=sload,address=address[0..12],out=screenout);
  	
  	Keyboard(out=kbd0);
    Or8Way(in=address[0..7], out=kbd1);
    Or8Way(in[0..4]=address[8..12], in[5..7]=false, out=kbd2);
    Or(a=kbd1,b=kbd2,out=kbd);
    Mux16(a=kbd0,b=false,sel=kbd,out=kbdout);
 
  	Mux16(a=rout,b=out22,sel=address[14],out=out);
    Mux16(a=screenout,b=kbdout,sel=address[13],out=out22);
	  
}